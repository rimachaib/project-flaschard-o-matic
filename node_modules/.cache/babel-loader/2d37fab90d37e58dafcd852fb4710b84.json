{"ast":null,"code":"var _jsxFileName = \"/Users/rimaatwork/Desktop/qualified-projects/Project_Flashcards_Qualified_1/src/Layout/AddCard.js\",\n    _s = $RefreshSig$();\n\n//Allows the user to add a new card to an existing deck\n//The path to this screen should include the deckId (i.e., /decks/:deckId/cards/new)\n//You must use the readDeck() function from src/utils/api/index.js to load the deck that you're adding the card to.  import {readDeck} from \"../utils/api/index.js\";\n//There is a breadcrumb navigation bar with a link to home /, followed by the name of the deck to which the cards are being added, and finally the text Add Card (e.g., Home/React Router/Add Card).\n//The screen displays the \"React Router: Add Card\" deck title.\n//There is a breadcrumb navigation bar with a link to home /, followed by the name of the deck to which the cards are being added, and finally the text Add Card (e.g., Home/React Router/Add Card).\n//The screen displays the \"React Router: Add Card\" deck title.\n//A form is shown with the \"front\" and \"back\" fields for a new card. Both fields use a <textarea> tag that can accommodate multiple lines of text.\n//If the user clicks \"Save\", a new card is created and associated with the relevant deck. Then the form is cleared and the process for adding a card is restarted.\n//If the user clicks \"Done\", the user is taken to the Deck screen.*/\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { createCard, readDeck } from \"../utils/api/index\";\nimport ErrorMessage from \"../Layout/ErrorMessage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AddCard() {\n  _s();\n\n  const {\n    deckId\n  } = useParams(); //AddCard component should be able to access the deckId parameter from the provided url\n  //Create an initialFormState variable and initialize it to an empty string for the front and back <textarea> of the card form inputs.\n\n  const initialState = {\n    front: \"\",\n    back: \"\",\n    deckId\n  };\n  const [error, setError] = useState(undefined);\n  const [currentDeck, setCurrentDeck] = useState({\n    name: \"\",\n    description: \"\"\n  });\n  const [formData, setFormData] = useState({ ...initialState\n  }); //Set the initial state of the formData to the initialState variable.\n\n  const abortController = new AbortController(); //Create new instance of AbortController, which is a special built-in object to be used in our useEffect hook\n\n  useEffect(() => {\n    async function loadData() {\n      try {\n        const dataFromAPI = await readDeck(deckId);\n        setCurrentDeck(dataFromAPI);\n      } catch (error) {\n        if (error.name !== \"AbortError\") {\n          console.error(error);\n        }\n      }\n    }\n\n    loadData();\n    return () => {\n      abortController.abort(); //cancels any pending request or response\n    };\n  }, [deckId]);\n\n  const handleChange = ({\n    target\n  }) => {\n    const value = target.value;\n    setFormData({ ...formData,\n      [target.name]: value\n    });\n  };\n\n  const handleReset = event => {\n    setFormData({ ...initialState\n    });\n  }; //Upon form submission make another API call via the createCard function to save the card\n\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    createCard(deckId, formData, abortController.signal).then(handleReset()).catch(setError);\n\n    if (error) {\n      return /*#__PURE__*/_jsxDEV(ErrorMessage, {\n        error: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this);\n    }\n\n    return () => abortController.abort();\n  };\n\n  useEffect(() => {\n    readDeck(deckId).then(setCurrentDeck);\n  }, [deckId]); //Array of dependencies includes deckID, so the effect will rerun only when the value of deckID changes\n  //currentDeck should be truthy after the API call returns\n\n  if (currentDeck) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n        \"aria-label\": \"breadcrumb\",\n        children: /*#__PURE__*/_jsxDEV(\"ol\", {\n          class: \"breadcrumb\",\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            class: \"breadcrumb-item\",\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"/\",\n              children: \"Home\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 8\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"breadcrumb-item\",\n            \"aria-current\": \"page\",\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              href: `/decks/${currentDeck.id}`,\n              children: currentDeck.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 8\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            class: \"breadcrumb-item active\",\n            \"aria-current\": \"page\",\n            children: \"Add Card\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [currentDeck.name, \": Add Card\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"front\",\n            className: \"form-label\",\n            children: \"Front Side\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            type: \"textarea\",\n            className: \"form-control\",\n            id: \"front\",\n            name: \"front\",\n            placeholder: \"Front Side\",\n            onChange: handleChange,\n            value: formData.front\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"description\",\n            className: \"form-label\",\n            children: \"Back Side\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            type: \"textarea\",\n            className: \"form-control\",\n            id: \"back\",\n            name: \"back\",\n            placeholder: \"Back Side\",\n            onChange: handleChange,\n            value: formData.back\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          class: \"btn btn-secondary mr-3\",\n          type: \"reset\",\n          onClick: handleReset,\n          value: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn btn-primary\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 4\n    }, this);\n  }\n\n  return \"Loading...\"; //Component should display \"Loading\" until the fetch() call returns and calls setCurrentDeck with the deckId\n}\n\n_s(AddCard, \"r4dAFUo/ia0GX2P7vsw0e7XT964=\", false, function () {\n  return [useParams];\n});\n\n_c = AddCard;\nexport default AddCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddCard\");","map":{"version":3,"sources":["/Users/rimaatwork/Desktop/qualified-projects/Project_Flashcards_Qualified_1/src/Layout/AddCard.js"],"names":["React","useState","useEffect","useParams","createCard","readDeck","ErrorMessage","AddCard","deckId","initialState","front","back","error","setError","undefined","currentDeck","setCurrentDeck","name","description","formData","setFormData","abortController","AbortController","loadData","dataFromAPI","console","abort","handleChange","target","value","handleReset","event","handleSubmit","preventDefault","signal","then","catch","id"],"mappings":"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","sourcesContent":["//Allows the user to add a new card to an existing deck\n//The path to this screen should include the deckId (i.e., /decks/:deckId/cards/new)\n//You must use the readDeck() function from src/utils/api/index.js to load the deck that you're adding the card to.  import {readDeck} from \"../utils/api/index.js\";\n//There is a breadcrumb navigation bar with a link to home /, followed by the name of the deck to which the cards are being added, and finally the text Add Card (e.g., Home/React Router/Add Card).\n//The screen displays the \"React Router: Add Card\" deck title.\n//There is a breadcrumb navigation bar with a link to home /, followed by the name of the deck to which the cards are being added, and finally the text Add Card (e.g., Home/React Router/Add Card).\n//The screen displays the \"React Router: Add Card\" deck title.\n//A form is shown with the \"front\" and \"back\" fields for a new card. Both fields use a <textarea> tag that can accommodate multiple lines of text.\n//If the user clicks \"Save\", a new card is created and associated with the relevant deck. Then the form is cleared and the process for adding a card is restarted.\n//If the user clicks \"Done\", the user is taken to the Deck screen.*/\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { createCard, readDeck } from \"../utils/api/index\";\nimport ErrorMessage from \"../Layout/ErrorMessage\";\n\nfunction AddCard() {\n\tconst { deckId } = useParams(); //AddCard component should be able to access the deckId parameter from the provided url\n\n\t//Create an initialFormState variable and initialize it to an empty string for the front and back <textarea> of the card form inputs.\n\tconst initialState = {\n\t\tfront: \"\",\n\t\tback: \"\",\n\t\tdeckId,\n\t};\n\tconst [error, setError] = useState(undefined);\n\tconst [currentDeck, setCurrentDeck] = useState({ name: \"\", description: \"\" });\n\tconst [formData, setFormData] = useState({ ...initialState }); //Set the initial state of the formData to the initialState variable.\n\n\tconst abortController = new AbortController(); //Create new instance of AbortController, which is a special built-in object to be used in our useEffect hook\n\n\tuseEffect(() => {\n\t\tasync function loadData() {\n\t\t\ttry {\n\t\t\t\tconst dataFromAPI = await readDeck(deckId);\n\t\t\t\tsetCurrentDeck(dataFromAPI);\n\t\t\t} catch (error) {\n\t\t\t\tif (error.name !== \"AbortError\") {\n\t\t\t\t\tconsole.error(error);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tloadData();\n\t\treturn () => {\n\t\t\tabortController.abort(); //cancels any pending request or response\n\t\t};\n\t}, [deckId]);\n\n\tconst handleChange = ({ target }) => {\n\t\tconst value = target.value;\n\n\t\tsetFormData({\n\t\t\t...formData,\n\t\t\t[target.name]: value,\n\t\t});\n\t};\n\n\tconst handleReset = (event) => {\n\t\tsetFormData({ ...initialState });\n\t};\n\t//Upon form submission make another API call via the createCard function to save the card\n\tconst handleSubmit = (event) => {\n\t\tevent.preventDefault();\n\n\t\tcreateCard(deckId, formData, abortController.signal)\n\t\t\t.then(handleReset())\n\t\t\t.catch(setError);\n\n\t\tif (error) {\n\t\t\treturn <ErrorMessage error={error} />;\n\t\t}\n\t\treturn () => abortController.abort();\n\t};\n\n\tuseEffect(() => {\n\t\treadDeck(deckId).then(setCurrentDeck);\n\t}, [deckId]); //Array of dependencies includes deckID, so the effect will rerun only when the value of deckID changes\n\n\t//currentDeck should be truthy after the API call returns\n\tif (currentDeck) {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<nav aria-label=\"breadcrumb\">\n\t\t\t\t\t<ol class=\"breadcrumb\">\n\t\t\t\t\t\t<li class=\"breadcrumb-item\">\n\t\t\t\t\t\t\t<a href=\"/\">Home</a>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li className=\"breadcrumb-item\" aria-current=\"page\">\n\t\t\t\t\t\t\t<a href={`/decks/${currentDeck.id}`}>{currentDeck.name}</a>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li class=\"breadcrumb-item active\" aria-current=\"page\">\n\t\t\t\t\t\t\tAdd Card\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</ol>\n\t\t\t\t</nav>\n\t\t\t\t<h1>{currentDeck.name}: Add Card</h1>\n\n\t\t\t\t<form onSubmit={handleSubmit}>\n\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t<label htmlFor=\"front\" className=\"form-label\">\n\t\t\t\t\t\t\tFront Side\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t<textarea\n\t\t\t\t\t\t\ttype=\"textarea\"\n\t\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\t\tid=\"front\"\n\t\t\t\t\t\t\tname=\"front\"\n\t\t\t\t\t\t\tplaceholder=\"Front Side\"\n\t\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\t\tvalue={formData.front}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t<label htmlFor=\"description\" className=\"form-label\">\n\t\t\t\t\t\t\tBack Side\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t<textarea\n\t\t\t\t\t\t\ttype=\"textarea\"\n\t\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\t\tid=\"back\"\n\t\t\t\t\t\t\tname=\"back\"\n\t\t\t\t\t\t\tplaceholder=\"Back Side\"\n\t\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\t\tvalue={formData.back}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<input\n\t\t\t\t\t\tclass=\"btn btn-secondary mr-3\"\n\t\t\t\t\t\ttype=\"reset\"\n\t\t\t\t\t\tonClick={handleReset}\n\t\t\t\t\t\tvalue=\"Reset\"\n\t\t\t\t\t></input>\n\t\t\t\t\t<button type=\"submit\" className=\"btn btn-primary\">\n\t\t\t\t\t\tSubmit\n\t\t\t\t\t</button>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t);\n\t}\n\treturn \"Loading...\"; //Component should display \"Loading\" until the fetch() call returns and calls setCurrentDeck with the deckId\n}\n\nexport default AddCard;\n"]},"metadata":{},"sourceType":"module"}