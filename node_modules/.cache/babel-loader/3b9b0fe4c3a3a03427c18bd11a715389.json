{"ast":null,"code":"var _jsxFileName = \"/Users/rimaatwork/Desktop/qualified-projects/Project_Flashcards_Qualified_1/src/Layout/EditCard.js\",\n    _s = $RefreshSig$();\n\n//The Edit Card screen allows the user to modify information on an existing card.\n//The path to this screen should include the deckId and the cardId (i.e., /decks/:deckId/cards/:cardId/edit).\n//You must use the readDeck() function from src/utils/api/index.js to load the deck that contains the card to be edited. Additionally, you must use the readCard() function from src/utils/api/index.js to load the card that you want to edit.\n//There is a breadcrumb navigation bar with a link to home /, followed by the name of the deck of which the edited card is a member, and finally the text Edit Card :cardId (e.g., Home/Deck React Router/Edit Card 4).\n//It displays the same form as the Add Card screen, except it is pre-filled with information for the existing card. It can be edited and updated.\n//If the user clicks on either \"Save\" or \"Cancel\", the user is taken to the Deck screen.\nimport React, { useEffect, useState } from \"react\";\nimport { useParams, Link } from \"react-router-dom\"; //useParams returns an object of key/value pairs of URL parameters. Use it to access match.params of the current <Route>.\n\nimport { updateCard, readCard, readDeck } from \"../utils/api\";\nimport ErrorMessage from \"../Layout/ErrorMessage\";\nimport CardForm from \"./CardForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction EditCard() {\n  _s();\n\n  const {\n    deckId,\n    cardId\n  } = useParams();\n  const [formData, setFormData] = useState({});\n  const [error, setError] = useState(undefined);\n  const [deck, setDeck] = useState({});\n  useEffect(() => {\n    readCard(cardId).then(setFormData);\n    readDeck(deckId).then(setDeck);\n  }, [cardId, deckId]);\n\n  const handleChange = ({\n    target\n  }) => {\n    const value = target.value;\n    setFormData({ ...formData,\n      [target.name]: value\n    });\n  };\n\n  const handleReset = event => {\n    readCard(cardId).then(setFormData);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const abortController = new AbortController();\n    updateCard(formData, abortController.signal).then().catch(setError);\n\n    if (error) {\n      return /*#__PURE__*/_jsxDEV(ErrorMessage, {\n        error: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this);\n    }\n  };\n\n  if (formData && deck) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n        \"aria-label\": \"breadcrumb\",\n        children: /*#__PURE__*/_jsxDEV(\"ol\", {\n          className: \"breadcrumb\",\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"breadcrumb-item\",\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"/\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"oi oi-home\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 55,\n                columnNumber: 9\n              }, this), \" Home\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 8\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"breadcrumb-item\",\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: `/decks/${deckId}`,\n              children: deck.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 8\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"breadcrumb-item active\",\n            \"aria-current\": \"page\",\n            children: [\"Edit Card \", `${cardId}`]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Edit Card\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(CardForm, {\n        formData: formData,\n        handleChange: handleChange,\n        handleReset: handleReset,\n        handleSubmit: handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 4\n    }, this);\n  }\n}\n\n_s(EditCard, \"legDzKuzWNm/o+DqdiQKE8Ek2Bs=\", false, function () {\n  return [useParams];\n});\n\n_c = EditCard;\nexport default EditCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditCard\");","map":{"version":3,"sources":["/Users/rimaatwork/Desktop/qualified-projects/Project_Flashcards_Qualified_1/src/Layout/EditCard.js"],"names":["React","useEffect","useState","useParams","Link","updateCard","readCard","readDeck","ErrorMessage","CardForm","EditCard","deckId","cardId","formData","setFormData","error","setError","undefined","deck","setDeck","then","handleChange","target","value","name","handleReset","event","handleSubmit","preventDefault","abortController","AbortController","signal","catch"],"mappings":"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","sourcesContent":["//The Edit Card screen allows the user to modify information on an existing card.\n//The path to this screen should include the deckId and the cardId (i.e., /decks/:deckId/cards/:cardId/edit).\n//You must use the readDeck() function from src/utils/api/index.js to load the deck that contains the card to be edited. Additionally, you must use the readCard() function from src/utils/api/index.js to load the card that you want to edit.\n//There is a breadcrumb navigation bar with a link to home /, followed by the name of the deck of which the edited card is a member, and finally the text Edit Card :cardId (e.g., Home/Deck React Router/Edit Card 4).\n//It displays the same form as the Add Card screen, except it is pre-filled with information for the existing card. It can be edited and updated.\n//If the user clicks on either \"Save\" or \"Cancel\", the user is taken to the Deck screen.\n\nimport React, { useEffect, useState } from \"react\";\nimport { useParams, Link } from \"react-router-dom\";\n//useParams returns an object of key/value pairs of URL parameters. Use it to access match.params of the current <Route>.\nimport { updateCard, readCard, readDeck } from \"../utils/api\";\nimport ErrorMessage from \"../Layout/ErrorMessage\";\nimport CardForm from \"./CardForm\";\n\nfunction EditCard() {\n\tconst { deckId, cardId } = useParams();\n\tconst [formData, setFormData] = useState({});\n\tconst [error, setError] = useState(undefined);\n\tconst [deck, setDeck] = useState({});\n\n\tuseEffect(() => {\n\t\treadCard(cardId).then(setFormData);\n\t\treadDeck(deckId).then(setDeck);\n\t}, [cardId, deckId]);\n\n\tconst handleChange = ({ target }) => {\n\t\tconst value = target.value;\n\n\t\tsetFormData({\n\t\t\t...formData,\n\t\t\t[target.name]: value,\n\t\t});\n\t};\n\n\tconst handleReset = (event) => {\n\t\treadCard(cardId).then(setFormData);\n\t};\n\tconst handleSubmit = (event) => {\n\t\tevent.preventDefault();\n\t\tconst abortController = new AbortController();\n\t\tupdateCard(formData, abortController.signal).then().catch(setError);\n\n\t\tif (error) {\n\t\t\treturn <ErrorMessage error={error} />;\n\t\t}\n\t};\n\n\tif (formData && deck) {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<nav aria-label=\"breadcrumb\">\n\t\t\t\t\t<ol className=\"breadcrumb\">\n\t\t\t\t\t\t<li className=\"breadcrumb-item\">\n\t\t\t\t\t\t\t<a href=\"/\">\n\t\t\t\t\t\t\t\t<span className=\"oi oi-home\" /> Home\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li className=\"breadcrumb-item\">\n\t\t\t\t\t\t\t<Link to={`/decks/${deckId}`}>{deck.name}</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li className=\"breadcrumb-item active\" aria-current=\"page\">\n\t\t\t\t\t\t\tEdit Card {`${cardId}`}\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</ol>\n\t\t\t\t</nav>\n\t\t\t\t<h1>Edit Card</h1>\n\t\t\t\t<CardForm\n\t\t\t\t\tformData={formData}\n\t\t\t\t\thandleChange={handleChange}\n\t\t\t\t\thandleReset={handleReset}\n\t\t\t\t\thandleSubmit={handleSubmit}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default EditCard;\n"]},"metadata":{},"sourceType":"module"}